
-- TOTAL ACCTS = ANY ACCOUNT WITH ACTUALS OR GOALS FOR THE FY
-- Q1 HM COUNT = CURRENT PERIOD HM ACTUALS COUNT
-- NEW NEW HM = CURRENT PERIOD HM COUNT - PRIOR PERIOD HM COUNT
-- PSC (RSM/REP) ~90 CNT --> VPS 15 CNT --> AVP 3 CNT


SELECT TOP 10 * FROM SBX_PSAS_DB.ANALYTICS.T_CPH_VAA_CLINICAL
SELECT  * FROM SBX_PSAS_DB.ANALYTICS.T_CPH_VAA_HM WHERE VPS_NUMBER = '2761'
SELECT TOP 10 * FROM SBX_PSAS_DB.ANALYTICS.T_CPH_VAA_HMA

--ALL ACCOUNTS THAT HAVE A ACTUALS OR GOALS
SELECT TOP 10 * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_GROSS_PROFIT -- USE TO PULL ALL ACCOUNTS UNDER A REP/VPS THAT HAVE SALES THIS FISCAL YEAR
--UNION THESE
SELECT TOP 10 * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_ACCOUNT_TARGETS -- USE TO PULL ALL ACCOUNTS UNDER A REP/VPS THAT HAVE GOALS THIS FISCAL YEAR

--HIERARCHY INFORMATION
SELECT TOP 10 ACCT_ID, REP_ID, VPS_ID, AVP_ID FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_FILTER_DATA
WHERE VPS_ID <> 'VPS NOT FOUND'


--FINALIZED ACTUALS AND GOALS FOR VPS
SELECT  PAYEE_ID,
        PAYEE_NAME,
        COMP_PLAN,
        COMPONENT_GROUP,
        MONTH AS PERIOD,
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Penetration' THEN GOALS ELSE 0 END) AS "HM_PENETRATION_GOAL",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Penetration' THEN ACTUALS ELSE 0 END) AS "HM_PENETRATION_ACTUAL",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Penetration' THEN ATTAINMENT ELSE 0 END) AS "HM_PENETRATION_ATTAINMENT",
        -- SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Clinical Penetration' THEN GOALS ELSE 0 END) AS "HM_CLINICAL_PENETRATION_GOAL",
        -- SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Clinical Penetration' THEN ACTUALS ELSE 0 END) AS "HM_CLINICAL_PENETRATION_ACTUAL",
        -- SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Clinical Penetration' THEN ATTAINMENT ELSE 0 END) AS "HM_CLINICAL_PENETRATION_ATTAINMENT",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Atlas Penetration' THEN GOALS ELSE 0 END) AS "HM_ATLAS_PENETRATION_GOAL",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Atlas Penetration' THEN ACTUALS ELSE 0 END) AS "HM_ATLAS_PENETRATION_ACTUAL",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Atlas Penetration' THEN ATTAINMENT  ELSE 0 END) AS "HM_ATLAS_PENETRATION_ATTAINMENT"
FROM    DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_VALUE_ADD 
-- WHERE   V_PE_VALUE_ADD.MONTH = (SELECT MAX(PERIOD) FROM MAX_DT)
WHERE     COMP_PLAN = 'USP_RETAIL_SM' -- VPS
AND     PAYEE_ID = '2761'
GROUP BY PAYEE_ID,
        PAYEE_NAME,
        COMP_PLAN,
        COMPONENT_GROUP,
        MONTH;



        






--PRESIDENTS CLUB EXAMPLE
------------------------------------------------------------
                       
--ESTABLISH PAYEE LIST 
CREATE OR REPLACE TEMPORARY TABLE HIERARCHY AS

SELECT DISTINCT V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID AS PAYEE_ID,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = '200360' THEN 'Shinn, Kyle'
                     WHEN V_PE_FILTER_DATA_NO_ACCT.REP_NAME IS NULL THEN V_PE_PAYEE_ACCOUNT_TARGETS.PAYEENAME 
                        ELSE V_PE_FILTER_DATA_NO_ACCT.REP_NAME END AS PAYEE_NAME,
                V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID AS COMP_PLAN_ID,
                V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START,
                V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_END,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('76961','105958','104720','17779','205742') THEN '117362'
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('183964','2852','58038','31006','2761') THEN '58250'
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('77083','6549','79670','179257','271720') THEN '78355'
                        ELSE V_PE_FILTER_DATA_NO_ACCT.AVP_ID END AVP_ID,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('76961','105958','104720','17779','205742') THEN 'Thomas, Brian M.'
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('183964','2852','58038','31006','2761') THEN 'Marshall, Jefferson Lee'
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('77083','6549','79670','179257','271720') THEN 'Bresnahan, Leigh Elizabeth'
                        ELSE V_PE_FILTER_DATA_NO_ACCT.AVP_NAME END AVP_NAME,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = '61803' THEN '105958' 
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID = 'USP_RETAIL_SM' THEN TO_VARCHAR(V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID)
                        ELSE V_PE_FILTER_DATA_NO_ACCT.VPS_ID END VPS_ID,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = '61803' THEN 'Brown, Michael A' 
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID = 'USP_RETAIL_SM' THEN V_PE_PAYEE_ACCOUNT_TARGETS.PAYEENAME
                ELSE V_PE_FILTER_DATA_NO_ACCT.VPS_NAME END VPS_NAME,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START >= '2023-04-01' AND V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID = 'USP_RSM' THEN 'Rising Star' 
                        ELSE 'Presidents' END AS "AWARD_TYPE"
FROM            DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_PLAN_ASSIGNMENT
LEFT JOIN       DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_FILTER_DATA_NO_ACCT
ON              V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = V_PE_FILTER_DATA_NO_ACCT.REP_ID
AND             V_PE_FILTER_DATA_NO_ACCT.AVP_BUSN_TITLE NOT LIKE '%Health Systems%'
AND             V_PE_FILTER_DATA_NO_ACCT.PERIOD < '2025 01 APR'
LEFT JOIN       DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_ACCOUNT_TARGETS
ON              V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = V_PE_PAYEE_ACCOUNT_TARGETS.PAYEEID
WHERE           EFFECTIVE_END >= '2023-04-01'
AND             COMPPLANID NOT LIKE '%MHS%'
AND             VPS_ID <> 'VPS NOT FOUND'
AND             V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID <> '200360' --REMOVE KYLE
GROUP BY        V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = '200360' THEN 'Shinn, Kyle'
                     WHEN V_PE_FILTER_DATA_NO_ACCT.REP_NAME IS NULL THEN V_PE_PAYEE_ACCOUNT_TARGETS.PAYEENAME 
                        ELSE V_PE_FILTER_DATA_NO_ACCT.REP_NAME END,
                V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID,
                V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START,
                V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_END,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('76961','105958','104720','17779','205742') THEN '117362'
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('183964','2852','58038','31006','2761') THEN '58250'
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('77083','6549','79670','179257','271720') THEN '78355'
                        ELSE V_PE_FILTER_DATA_NO_ACCT.AVP_ID END,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('76961','105958','104720','17779','205742') THEN 'Thomas, Brian M.'
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('183964','2852','58038','31006','2761') THEN 'Marshall, Jefferson Lee'
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID IN ('77083','6549','79670','179257','271720') THEN 'Bresnahan, Leigh Elizabeth'
                        ELSE V_PE_FILTER_DATA_NO_ACCT.AVP_NAME END,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = '61803' THEN '105958' 
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID = 'USP_RETAIL_SM' THEN TO_VARCHAR(V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID)
                        ELSE V_PE_FILTER_DATA_NO_ACCT.VPS_ID END,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID = '61803' THEN 'Brown, Michael A' 
                     WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID = 'USP_RETAIL_SM' THEN V_PE_PAYEE_ACCOUNT_TARGETS.PAYEENAME
                ELSE V_PE_FILTER_DATA_NO_ACCT.VPS_NAME END,
                CASE WHEN V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_START > '2022-04-01' AND V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID = 'USP_RSM' THEN 'Rising Star' 
                        ELSE 'Presidents' END;


--REMOVE PETER PSC ACTIVITY DUE TO MOVE TO PSE
DELETE FROM HIERARCHY WHERE PAYEE_ID = '194801' AND COMP_PLAN_ID = 'USP_RSM';

--REMOVE CHELSEA HART ACTIVITY AS SHE ENDED DURING FY
DELETE FROM HIERARCHY WHERE PAYEE_ID = '124438';


--GROSS PROFIT ACTUALS
CREATE OR REPLACE TEMPORARY TABLE GP_ACT AS

SELECT      HIERARCHY.PAYEE_ID,
            HIERARCHY.PAYEE_NAME,
            ACTUALS.ACCOUNT_ID,
            DIM_CUST_ACCT_CURR.CUST_ACCT_NAM AS ACCOUNT_NAME,
            ACTUALS.PERIOD,
            SUM(GROSS_PROFIT) AS GROSS_PROFIT_ACT
FROM        HIERARCHY
LEFT JOIN   DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_GROSS_PROFIT ACTUALS
ON          ACTUALS.PAYEE_ID = HIERARCHY.PAYEE_ID
LEFT JOIN   PRD_PSAS_DB.RPT.DIM_CUST_ACCT_CURR
ON          LPAD(ACTUALS.ACCOUNT_ID,6,'0') = LPAD(DIM_CUST_ACCT_CURR.CUST_ACCT_ID,6,'0')
WHERE       ACTUALS.PERIOD IS NOT NULL
GROUP BY    HIERARCHY.PAYEE_ID,
            HIERARCHY.PAYEE_NAME,
            ACTUALS.ACCOUNT_ID,
            DIM_CUST_ACCT_CURR.CUST_ACCT_NAM,
            ACTUALS.PERIOD;
SELECT TOP 10 * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_GROSS_PROFIT
SELECT TOP 10 * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_ACCOUNT_TARGETS
            
--GROSS PROFIT GOALS
CREATE OR REPLACE TEMPORARY TABLE GP_GOAL AS

SELECT      HIERARCHY.PAYEE_ID,
            HIERARCHY.PAYEE_NAME,
            GOALS.ACCOUNTID AS ACCOUNT_ID,
            DIM_CUST_ACCT_CURR.CUST_ACCT_NAM AS ACCOUNT_NAME,
            GOALS.MONTH AS PERIOD,
            SUM(TARGETVALUE) AS GROSS_PROFIT_GOAL
FROM        HIERARCHY
LEFT JOIN   DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_ACCOUNT_TARGETS GOALS
ON          GOALS.PAYEEID = HIERARCHY.PAYEE_ID
AND         GOALS.PRODUCTGROUP = 'GROSS PROFIT'
AND         GOALS.MONTH <= (SELECT MAX(PERIOD) FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_GROSS_PROFIT)
LEFT JOIN   PRD_PSAS_DB.RPT.DIM_CUST_ACCT_CURR
ON          LPAD(GOALS.ACCOUNTID,6,'0') = LPAD(DIM_CUST_ACCT_CURR.CUST_ACCT_ID,6,'0')
WHERE       GOALS.MONTH IS NOT NULL
GROUP BY     HIERARCHY.PAYEE_ID,
            HIERARCHY.PAYEE_NAME,
            GOALS.ACCOUNTID,
            DIM_CUST_ACCT_CURR.CUST_ACCT_NAM,
            GOALS.MONTH;
            

--ACCOUNT LIST
CREATE OR REPLACE TEMPORARY TABLE ACCT_LIST AS

SELECT      ACCOUNT_ID,
            ACCOUNT_NAME,
            PAYEE_ID,
            PAYEE_NAME,
            PERIOD
FROM        GP_ACT
GROUP BY    ACCOUNT_ID,
            ACCOUNT_NAME,
            PAYEE_ID,
            PAYEE_NAME,
            PERIOD
UNION
SELECT      ACCOUNT_ID,
            ACCOUNT_NAME,
            PAYEE_ID,
            PAYEE_NAME,
            PERIOD
FROM        GP_GOAL
GROUP BY    ACCOUNT_ID,
            ACCOUNT_NAME,
            PAYEE_ID,
            PAYEE_NAME,
            PERIOD;


--COMBINE GP
CREATE OR REPLACE TEMPORARY TABLE GP_COMBINE AS

SELECT      ACCT_LIST.PAYEE_ID,
            ACCT_LIST.PAYEE_NAME,
            HIERARCHY.COMP_PLAN_ID,
            HIERARCHY.EFFECTIVE_START,
            HIERARCHY.EFFECTIVE_END,
            HIERARCHY.AVP_ID,
            HIERARCHY.AVP_NAME,
            HIERARCHY.VPS_ID,
            HIERARCHY.VPS_NAME,
            HIERARCHY.AWARD_TYPE,
            ACCT_LIST.ACCOUNT_ID,
            ACCT_LIST.ACCOUNT_NAME,
            ACCT_LIST.PERIOD,
            SUM(ZEROIFNULL(GROSS_PROFIT_ACT)) GROSS_PROFIT_ACT,
            SUM(ZEROIFNULL(GROSS_PROFIT_GOAL)) GROSS_PROFIT_GOAL
FROM        ACCT_LIST
LEFT JOIN   HIERARCHY
ON          ACCT_LIST.PAYEE_ID = HIERARCHY.PAYEE_ID
LEFT JOIN   GP_ACT
ON          ACCT_LIST.PAYEE_ID = GP_ACT.PAYEE_ID
AND         ACCT_LIST.ACCOUNT_ID = GP_ACT.ACCOUNT_ID
AND         ACCT_LIST.PERIOD = GP_ACT.PERIOD
LEFT JOIN   GP_GOAL
ON          ACCT_LIST.PAYEE_ID = GP_GOAL.PAYEE_ID
AND         ACCT_LIST.ACCOUNT_ID = GP_GOAL.ACCOUNT_ID
AND         ACCT_LIST.PERIOD = GP_GOAL.PERIOD
GROUP BY    ACCT_LIST.PAYEE_ID,
            ACCT_LIST.PAYEE_NAME,
            HIERARCHY.COMP_PLAN_ID,
            HIERARCHY.EFFECTIVE_START,
            HIERARCHY.EFFECTIVE_END,
            HIERARCHY.AVP_ID,
            HIERARCHY.AVP_NAME,
            HIERARCHY.VPS_ID,
            HIERARCHY.VPS_NAME,
            HIERARCHY.AWARD_TYPE,
            ACCT_LIST.ACCOUNT_ID,
            ACCT_LIST.ACCOUNT_NAME,
            ACCT_LIST.PERIOD;


--COMBINE GP
CREATE OR REPLACE TEMPORARY TABLE GP_PAYEE AS

SELECT      GP_COMBINE.PAYEE_ID,
            GP_COMBINE.PAYEE_NAME,
            GP_COMBINE.COMP_PLAN_ID,
            GP_COMBINE.EFFECTIVE_START,
            GP_COMBINE.EFFECTIVE_END,
            GP_COMBINE.AVP_ID,
            GP_COMBINE.AVP_NAME,
            GP_COMBINE.VPS_ID,
            GP_COMBINE.VPS_NAME,
            GP_COMBINE.AWARD_TYPE,
            GP_COMBINE.PERIOD,
            SUM(GROSS_PROFIT_ACT) GROSS_PROFIT_ACT,
            SUM(GROSS_PROFIT_GOAL) GROSS_PROFIT_GOAL
FROM        GP_COMBINE
GROUP BY    GP_COMBINE.PAYEE_ID,
            GP_COMBINE.PAYEE_NAME,
            GP_COMBINE.COMP_PLAN_ID,
            GP_COMBINE.EFFECTIVE_START,
            GP_COMBINE.EFFECTIVE_END,
            GP_COMBINE.AVP_ID,
            GP_COMBINE.AVP_NAME,
            GP_COMBINE.VPS_ID,
            GP_COMBINE.VPS_NAME,
            GP_COMBINE.AWARD_TYPE,
            GP_COMBINE.PERIOD;


--FIND MAX DATE
CREATE OR REPLACE TEMPORARY TABLE MAX_DT AS

SELECT  MONTH AS PERIOD,
        SUM(ACTUALS) ACTUALS
FROM    DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_VALUE_ADD 
WHERE   COMP_PLAN = 'USP_RETAIL_SM'
GROUP BY MONTH
HAVING  SUM(ACTUALS) > 0;

SELECT * FROM  DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_VALUE_ADD WHERE PAYEE_ID

--VPS VALUE ADD PENETRATION
CREATE OR REPLACE TEMPORARY TABLE VPS_HM_PEN AS

SELECT  PAYEE_ID,
        PAYEE_NAME,
        COMP_PLAN,
        COMPONENT_GROUP,
        MONTH AS PERIOD,
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Penetration' THEN GOALS ELSE 0 END) AS "HM_PENETRATION_GOAL",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Penetration' THEN ACTUALS ELSE 0 END) AS "HM_PENETRATION_ACTUAL",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Penetration' THEN ATTAINMENT ELSE 0 END) AS "HM_PENETRATION_ATTAINMENT",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Clinical Penetration' THEN GOALS ELSE 0 END) AS "HM_CLINICAL_PENETRATION_GOAL",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Clinical Penetration' THEN ACTUALS ELSE 0 END) AS "HM_CLINICAL_PENETRATION_ACTUAL",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Clinical Penetration' THEN ATTAINMENT ELSE 0 END) AS "HM_CLINICAL_PENETRATION_ATTAINMENT",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Atlas Penetration' THEN GOALS ELSE 0 END) AS "HM_ATLAS_PENETRATION_GOAL",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Atlas Penetration' THEN ACTUALS ELSE 0 END) AS "HM_ATLAS_PENETRATION_ACTUAL",
        SUM(CASE WHEN COMPONENT_NAME = 'Health Mart Atlas Penetration' THEN ATTAINMENT  ELSE 0 END) AS "HM_ATLAS_PENETRATION_ATTAINMENT"
FROM    DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_VALUE_ADD 
WHERE   V_PE_VALUE_ADD.MONTH = (SELECT MAX(PERIOD) FROM MAX_DT)
AND     COMP_PLAN = 'USP_RETAIL_SM'
GROUP BY PAYEE_ID,
        PAYEE_NAME,
        COMP_PLAN,
        COMPONENT_GROUP,
        MONTH;


--PSC VALUE ADD ANNUITY
CREATE OR REPLACE TEMPORARY TABLE PSC_VA_ANN AS

SELECT  PAYEE_ID,
        PAYEE_NAME,
        COMP_PLAN,
        COMPONENT_GROUP,
        MONTH AS PERIOD,
        SUM(ACTUALS) "VALUE_ADD_ANNUITY"
FROM    DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_VALUE_ADD
WHERE   COMP_PLAN IN ('USP_RSM','USP_COMBO')
GROUP BY PAYEE_ID,
        PAYEE_NAME,
        COMP_PLAN,
        COMPONENT_GROUP,
        MONTH;


CREATE OR REPLACE TEMPORARY TABLE RENEW_DETAIL AS

SELECT       CASE WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-04' THEN '2023-01 APR'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-05' THEN '2023-02 MAY'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-06' THEN '2023-03 JUN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-07' THEN '2023-04 JUL'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-08' THEN '2023-05 AUG'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-09' THEN '2023-06 SEP'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-10' THEN '2023-07 OCT'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-11' THEN '2023-08 NOV'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-12' THEN '2023-09 DEC'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-01' THEN '2023-10 JAN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-02' THEN '2023-11 FEB'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-03' THEN '2023-12 MAR' ELSE NULL END "PERIOD",
            PAIDPAYEE AS PAYEE_ID,
            PAIDPAYEENAME AS PAYEE_NAME,
            PAYEETYPE AS PAYEE_TYPE,
            SPLITPCT AS SPLIT_PCT,
            ESTTOTALPOINTS AS RENEWAL_POINTS,
            ESTTOTALPOINTS * SPLITPCT AS RENEWAL_POINTS_ADJ,
            COUNT(OPPORTUNITY_ID) AS RENEWAL_COUNT
FROM        DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_COMP_REQUEST_VERIFICATION
WHERE       COMPONENT_ID = 'CR ADVANCE PART I'
AND         SIGNINGTYPE = 'RENEWAL'
AND         PART1STATUS = 'APPROVED'
AND         TO_DATE(CLOSEDATE) >= '04/01/2022' --FY23 ONLY
AND         TO_DATE(CLOSEDATE) <= '03/31/2023' --FY23 ONLY
AND         (ACCOUNTTYPE = 'RETAIL' OR PAIDPAYEE = '182604')
GROUP BY    CASE WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-04' THEN '2023-01 APR'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-05' THEN '2023-02 MAY'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-06' THEN '2023-03 JUN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-07' THEN '2023-04 JUL'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-08' THEN '2023-05 AUG'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-09' THEN '2023-06 SEP'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-10' THEN '2023-07 OCT'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-11' THEN '2023-08 NOV'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-12' THEN '2023-09 DEC'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-01' THEN '2023-10 JAN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-02' THEN '2023-11 FEB'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-03' THEN '2023-12 MAR' ELSE NULL END,
            PAIDPAYEE,
            PAIDPAYEENAME,
            PAYEETYPE,
            SPLITPCT,
            ESTTOTALPOINTS;


--RENEWALS
CREATE OR REPLACE TEMPORARY TABLE RENEW AS

SELECT      CASE WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-04' THEN '2023-01 APR'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-05' THEN '2023-02 MAY'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-06' THEN '2023-03 JUN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-07' THEN '2023-04 JUL'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-08' THEN '2023-05 AUG'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-09' THEN '2023-06 SEP'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-10' THEN '2023-07 OCT'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-11' THEN '2023-08 NOV'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-12' THEN '2023-09 DEC'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-01' THEN '2023-10 JAN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-02' THEN '2023-11 FEB'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-03' THEN '2023-12 MAR' ELSE NULL END "PERIOD",
            PAIDPAYEE AS PAYEE_ID,
            PAIDPAYEENAME AS PAYEE_NAME,
            PAYEETYPE AS PAYEE_TYPE,
            SUM(ESTTOTALPOINTS) AS RENEWAL_POINTS,
            SUM(ESTTOTALPOINTS * SPLITPCT) AS RENEWAL_POINTS_ADJ,
            COUNT(OPPORTUNITY_ID) AS RENEWAL_COUNT
FROM        DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_COMP_REQUEST_VERIFICATION
WHERE       COMPONENT_ID = 'CR ADVANCE PART I'
AND         SIGNINGTYPE = 'RENEWAL'
AND         PART1STATUS = 'APPROVED'
AND         TO_DATE(CLOSEDATE) >= '04/01/2022' --FY23 ONLY
AND         TO_DATE(CLOSEDATE) <= '03/31/2023' --FY23 ONLY
AND         (ACCOUNTTYPE = 'RETAIL' OR PAIDPAYEE = '182604')
GROUP BY    CASE WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-04' THEN '2023-01 APR'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-05' THEN '2023-02 MAY'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-06' THEN '2023-03 JUN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-07' THEN '2023-04 JUL'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-08' THEN '2023-05 AUG'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-09' THEN '2023-06 SEP'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-10' THEN '2023-07 OCT'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-11' THEN '2023-08 NOV'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-12' THEN '2023-09 DEC'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-01' THEN '2023-10 JAN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-02' THEN '2023-11 FEB'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-03' THEN '2023-12 MAR' ELSE NULL END,
            PAIDPAYEE,
            PAIDPAYEENAME,
            PAYEETYPE;

--------------------------------------------------------------------
--NEW BUSINESS

--IDENTIFY OPPORTUNTIES
CREATE OR REPLACE TEMPORARY TABLE NB_OPP AS
--SELECT TOP 10 * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_COMP_REQUEST_VERIFICATION

SELECT      OPPORTUNITY_ID,
            CLOSEDATE AS CLOSE_DT,
            REPORTPERIOD AS PERIOD,
            PAIDPAYEE AS PAYEE_ID,
            PAIDPAYEENAME AS PAYEE_NAME,
            PAYEETYPE AS PAYEE_TYPE,
            SPLITPCT AS SPLIT_PCT,
            ESTTOTALPOINTS AS EST_TOTAL_POINTS
FROM        DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_COMP_REQUEST_VERIFICATION
WHERE       COMPONENT_ID = 'CR ADVANCE PART I'
AND         SIGNINGTYPE = 'NEW BUSINESS'
AND         PART1STATUS = 'APPROVED'
AND         TO_DATE(CLOSEDATE) >= '04/01/2022' --FY23 ONLY
AND         TO_DATE(CLOSEDATE) <= '03/31/2023' --FY23 ONLY
GROUP BY    OPPORTUNITY_ID,
            CLOSEDATE,
            REPORTPERIOD,
            PAIDPAYEE,
            PAIDPAYEENAME,
            PAYEETYPE,
            SPLITPCT,
            ESTTOTALPOINTS;
         

--IDENTIFY ACCOUNTS ASSOCIATED WITH OPPORTUNITIES
CREATE OR REPLACE TEMPORARY TABLE NB_OPP_ACCT AS
--SELECT TOP 10 * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_OPPORTUNITY_ACCOUNTS

SELECT      NB_OPP.OPPORTUNITY_ID,
            CLOSE_DT,
          --  PERIOD,
            PAYEE_ID,
            PAYEE_NAME,
            PAYEE_TYPE,
            SPLIT_PCT,
            ACCOUNT_ID,
            ACCOUNT_NAME,
            EST_TOTAL_POINTS,
            PART1APPROVEDATE,
            PART1STATUS
FROM        NB_OPP
JOIN        DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_OPPORTUNITY_ACCOUNTS
ON          NB_OPP.OPPORTUNITY_ID = V_PE_OPPORTUNITY_ACCOUNTS.OPPORTUNITY_ID
GROUP BY    NB_OPP.OPPORTUNITY_ID,
            CLOSE_DT,
          --  PERIOD,
            PAYEE_ID,
            PAYEE_NAME,
            PAYEE_TYPE,
            SPLIT_PCT,
            ACCOUNT_ID,
            ACCOUNT_NAME,
            EST_TOTAL_POINTS,
            PART1APPROVEDATE,
            PART1STATUS;


CREATE OR REPLACE TEMPORARY TABLE MAP_DATE AS

SELECT       CALENDAR_MONTH, 
             CASE WHEN CALENDAR_MONTH = 'APRIL 2022' THEN '2023-01 APR'
             WHEN CALENDAR_MONTH = 'MAY 2022' THEN '2023-02 MAY'
             WHEN CALENDAR_MONTH = 'JUNE 2022' THEN '2023-03 JUN'
             WHEN CALENDAR_MONTH = 'JULY 2022' THEN '2023-04 JUL'
             WHEN CALENDAR_MONTH = 'AUGUST 2022' THEN '2023-05 AUG'
             WHEN CALENDAR_MONTH = 'SEPTEMBER 2022' THEN '2023-06 SEP'
             WHEN CALENDAR_MONTH = 'OCTOBER 2022' THEN '2023-07 OCT'
             WHEN CALENDAR_MONTH = 'NOVEMBER 2022' THEN '2023-08 NOV'
             WHEN CALENDAR_MONTH = 'DECEMBER 2022' THEN '2023-09 DEC'
             WHEN CALENDAR_MONTH = 'JANUARY 2023' THEN '2023-10 JAN'
             WHEN CALENDAR_MONTH = 'FEBRUARY 2023' THEN '2023-11 FEB'
             WHEN CALENDAR_MONTH = 'MARCH 2023' THEN '2023-12 MAR' END "PERIOD"
FROM         DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_GROSS_PROFIT_ACTUAL
GROUP BY     CALENDAR_MONTH,
             CASE WHEN CALENDAR_MONTH = 'APRIL 2022' THEN '2023-01 APR'
             WHEN CALENDAR_MONTH = 'MAY 2022' THEN '2023-02 MAY'
             WHEN CALENDAR_MONTH = 'JUNE 2022' THEN '2023-03 JUN'
             WHEN CALENDAR_MONTH = 'JULY 2022' THEN '2023-04 JUL'
             WHEN CALENDAR_MONTH = 'AUGUST 2022' THEN '2023-05 AUG'
             WHEN CALENDAR_MONTH = 'SEPTEMBER 2022' THEN '2023-06 SEP'
             WHEN CALENDAR_MONTH = 'OCTOBER 2022' THEN '2023-07 OCT'
             WHEN CALENDAR_MONTH = 'NOVEMBER 2022' THEN '2023-08 NOV'
             WHEN CALENDAR_MONTH = 'DECEMBER 2022' THEN '2023-09 DEC'
             WHEN CALENDAR_MONTH = 'JANUARY 2023' THEN '2023-10 JAN'
             WHEN CALENDAR_MONTH = 'FEBRUARY 2023' THEN '2023-11 FEB'
             WHEN CALENDAR_MONTH = 'MARCH 2023' THEN '2023-12 MAR' END;

         
            
CREATE OR REPLACE TEMPORARY TABLE NB_ACT AS

SELECT      NB_OPP_ACCT.PAYEE_ID,
            NB_OPP_ACCT.PAYEE_NAME,
            NB_OPP_ACCT.PAYEE_TYPE,
            MAP_DATE.PERIOD,
            SUM(NB_OPP_ACCT.EST_TOTAL_POINTS) AS EST_TOTAL_POINTS,
            SUM(NB_OPP_ACCT.EST_TOTAL_POINTS * SPLIT_PCT) AS EST_TOTAL_POINTS_ADJ,
            SUM(GROSS_PROFIT_ACTUALS) AS GROSS_PROFIT_ACT,
            SUM(GROSS_PROFIT_ACTUALS * SPLIT_PCT) AS GROSS_PROFIT_ACT_ADJ,
            SUM(NET_REVENUE) AS NET_REVENUE_ACT,
            SUM(NET_REVENUE * SPLIT_PCT) AS NET_REVENUE_ACT_ADJ
FROM        NB_OPP_ACCT
JOIN        DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_GROSS_PROFIT_ACTUAL
ON          LPAD(NB_OPP_ACCT.ACCOUNT_ID,6,0) = LPAD(V_PE_GROSS_PROFIT_ACTUAL.ACCOUNT_ID,6,0)
LEFT JOIN   MAP_DATE
ON          V_PE_GROSS_PROFIT_ACTUAL.CALENDAR_MONTH = MAP_DATE.CALENDAR_MONTH
--WHERE       MARKET_SEGMENT = 'Retail'
GROUP BY    NB_OPP_ACCT.PAYEE_ID,
            NB_OPP_ACCT.PAYEE_NAME,
            NB_OPP_ACCT.PAYEE_TYPE,
            MAP_DATE.PERIOD;


--IDENTIFY ACCOUNTS ASSOCIATED WITH OPPORTUNITIES

CREATE OR REPLACE TEMPORARY TABLE NB_POINTS AS

SELECT       CASE WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-04' THEN '2023-01 APR'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-05' THEN '2023-02 MAY'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-06' THEN '2023-03 JUN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-07' THEN '2023-04 JUL'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-08' THEN '2023-05 AUG'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-09' THEN '2023-06 SEP'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-10' THEN '2023-07 OCT'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-11' THEN '2023-08 NOV'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-12' THEN '2023-09 DEC'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-01' THEN '2023-10 JAN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-02' THEN '2023-11 FEB'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-03' THEN '2023-12 MAR' ELSE NULL END "PERIOD",
            PAIDPAYEE AS PAYEE_ID,
            PAIDPAYEENAME AS PAYEE_NAME,
            PAYEETYPE AS PAYEE_TYPE,
            SUM(ESTTOTALPOINTS * SPLITPCT) AS EST_TOTAL_POINTS_ADJ,
            SUM(ESTTOTALPOINTS) AS EST_TOTAL_POINTS
FROM        DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_COMP_REQUEST_VERIFICATION
WHERE       COMPONENT_ID = 'CR ADVANCE PART I'
AND         SIGNINGTYPE = 'NEW BUSINESS'
AND         PART1STATUS = 'APPROVED'
AND         TO_DATE(CLOSEDATE) >= '04/01/2022' --FY23 ONLY
AND         TO_DATE(CLOSEDATE) <= '03/31/2023' --FY23 ONLY
GROUP BY     CASE WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-04' THEN '2023-01 APR'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-05' THEN '2023-02 MAY'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-06' THEN '2023-03 JUN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-07' THEN '2023-04 JUL'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-08' THEN '2023-05 AUG'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-09' THEN '2023-06 SEP'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-10' THEN '2023-07 OCT'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-11' THEN '2023-08 NOV'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2022-12' THEN '2023-09 DEC'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-01' THEN '2023-10 JAN'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-02' THEN '2023-11 FEB'
             WHEN TO_CHAR(DATE(CLOSEDATE),'YYYY-MM') = '2023-03' THEN '2023-12 MAR' ELSE NULL END,
            PAIDPAYEE,
            PAIDPAYEENAME,
            PAYEETYPE;


//

CREATE OR REPLACE TEMPORARY TABLE PERIOD AS

SELECT PERIOD FROM GP_PAYEE GROUP BY PERIOD;
 
 
CREATE OR REPLACE TEMPORARY TABLE FOUNDATION AS

SELECT          *
FROM            HIERARCHY
CROSS JOIN      PERIOD;


--CREATE OR REPLACE TABLE SBX_PSAS_DB.SALES_OPS_GOV.T_CPH_FY23_PRESIDENTS_CLUB AS

CREATE OR REPLACE TEMPORARY TABLE FINAL_PREP AS

SELECT      FOUNDATION.PAYEE_ID,
            FOUNDATION.PAYEE_NAME,
            FOUNDATION.COMP_PLAN_ID,
            FOUNDATION.EFFECTIVE_START,
            FOUNDATION.EFFECTIVE_END,
            FOUNDATION.AVP_ID,
            FOUNDATION.AVP_NAME,
            FOUNDATION.VPS_ID,
            FOUNDATION.VPS_NAME,
            FOUNDATION.AWARD_TYPE,
            FOUNDATION.PERIOD,
            SUM(NB_POINTS.EST_TOTAL_POINTS) NB_EST_TOTAL_POINTS,
            SUM(NB_POINTS.EST_TOTAL_POINTS_ADJ) NB_EST_TOTAL_POINTS_ADJ,
            SUM(NB_ACT.GROSS_PROFIT_ACT) NB_GROSS_PROFIT_ACT,
            SUM(NB_ACT.GROSS_PROFIT_ACT_ADJ) NB_GROSS_PROFIT_ACT_ADJ,
            SUM(GP_PAYEE.GROSS_PROFIT_ACT) GROSS_PROFIT_ACT,
            SUM(GP_PAYEE.GROSS_PROFIT_GOAL) GROSS_PROFIT_GOAL,
            SUM(HM_PENETRATION_ACTUAL) HM_PENETRATION_ACTUAL,
            SUM(HM_PENETRATION_GOAL) HM_PENETRATION_GOAL,
            SUM(HM_PENETRATION_ATTAINMENT) HM_PENETRATION_ATTAINMENT,
            SUM(HM_CLINICAL_PENETRATION_ACTUAL) HM_CLINICAL_PENETRATION_ACTUAL,
            SUM(HM_CLINICAL_PENETRATION_GOAL) HM_CLINICAL_PENETRATION_GOAL,
            SUM(HM_CLINICAL_PENETRATION_ATTAINMENT) HM_CLINICAL_PENETRATION_ATTAINMENT,
            SUM(HM_ATLAS_PENETRATION_ACTUAL) HM_ATLAS_PENETRATION_ACTUAL,
            SUM(HM_ATLAS_PENETRATION_GOAL) HM_ATLAS_PENETRATION_GOAL,
            SUM(HM_ATLAS_PENETRATION_ATTAINMENT) HM_ATLAS_PENETRATION_ATTAINMENT,
            SUM(VALUE_ADD_ANNUITY) VALUE_ADD_ANNUITY,
            SUM(RENEWAL_POINTS) RENEWAL_POINTS,
            SUM(RENEWAL_POINTS_ADJ) RENEWAL_POINTS_ADJ,
            SUM(RENEWAL_COUNT) RENEWAL_COUNT
FROM        FOUNDATION
LEFT JOIN   NB_ACT
ON          FOUNDATION.PAYEE_ID = NB_ACT.PAYEE_ID
AND         FOUNDATION.PERIOD = NB_ACT.PERIOD
LEFT JOIN   NB_POINTS
ON          FOUNDATION.PAYEE_ID = NB_POINTS.PAYEE_ID
AND         FOUNDATION.PERIOD = NB_POINTS.PERIOD
LEFT JOIN   GP_PAYEE
ON          FOUNDATION.PAYEE_ID = GP_PAYEE.PAYEE_ID
AND         FOUNDATION.PERIOD = GP_PAYEE.PERIOD
LEFT JOIN   VPS_HM_PEN
ON          FOUNDATION.PAYEE_ID = VPS_HM_PEN.PAYEE_ID
AND         FOUNDATION.PERIOD = VPS_HM_PEN.PERIOD 
LEFT JOIN   PSC_VA_ANN
ON          FOUNDATION.PAYEE_ID = PSC_VA_ANN.PAYEE_ID
AND         FOUNDATION.PERIOD = PSC_VA_ANN.PERIOD 
LEFT JOIN   RENEW
ON          FOUNDATION.PAYEE_ID = RENEW.PAYEE_ID
AND         FOUNDATION.PERIOD = RENEW.PERIOD 
WHERE       FOUNDATION.PERIOD <= (SELECT MAX(PERIOD) PERIOD FROM GP_PAYEE)
AND         FOUNDATION.PAYEE_ID NOT IN ('2612','15851','56962','76853','76963')
GROUP BY    FOUNDATION.PAYEE_ID,
            FOUNDATION.PAYEE_NAME,
            FOUNDATION.COMP_PLAN_ID,
            FOUNDATION.EFFECTIVE_START,
            FOUNDATION.EFFECTIVE_END,
            FOUNDATION.AVP_ID,
            FOUNDATION.AVP_NAME,
            FOUNDATION.VPS_ID,
            FOUNDATION.VPS_NAME,
            FOUNDATION.AWARD_TYPE,
            FOUNDATION.PERIOD;

----------------------------------------------------------------------
//
//CREATE OR REPLACE TEMPORARY TABLE FINAL_PREP AS
//
//SELECT * FROM SBX_PSAS_DB.SALES_OPS_GOV.T_CPH_FY23_PRESIDENTS_CLUB WHERE PAYEE_ID NOT IN ('2612','15851','56962','76853','76963');
 
 
CREATE OR REPLACE TEMPORARY TABLE RANK_PREP AS

SELECT      PAYEE_ID, 
            PAYEE_NAME,
            AWARD_TYPE,
            COMP_PLAN_ID, 
            SUM(GROSS_PROFIT_ACT) / SUM(GROSS_PROFIT_GOAL) AS GROSS_PROFIT_ATTAINMENT,
            RANK() OVER (PARTITION BY AWARD_TYPE, COMP_PLAN_ID ORDER BY ZEROIFNULL(SUM(GROSS_PROFIT_ACT) / SUM(GROSS_PROFIT_GOAL)) DESC) AS GROSS_PROFIT_ATT_RANK,
            SUM(VALUE_ADD_ANNUITY) VALUE_ADD_ANNUITY,
            RANK() OVER (PARTITION BY AWARD_TYPE, COMP_PLAN_ID ORDER BY ZEROIFNULL(SUM(VALUE_ADD_ANNUITY)) DESC) AS VALUE_ADD_ANNUITY_RANK,
            SUM(NB_GROSS_PROFIT_ACT_ADJ) NB_GROSS_PROFIT_ACT_ADJ,
            RANK() OVER (PARTITION BY AWARD_TYPE, COMP_PLAN_ID ORDER BY ZEROIFNULL(SUM(NB_GROSS_PROFIT_ACT_ADJ)) DESC) AS NB_GROSS_PROFIT_RANK,
            SUM(HM_PENETRATION_ACTUAL) + SUM(HM_CLINICAL_PENETRATION_ACTUAL) + SUM(HM_ATLAS_PENETRATION_ACTUAL) AS TOTAL_PENETRATION_ACT,
            SUM(HM_PENETRATION_GOAL) + SUM(HM_CLINICAL_PENETRATION_GOAL) + SUM(HM_ATLAS_PENETRATION_GOAL) AS TOTAL_PENETRATION_GOAL,
            (SUM(HM_PENETRATION_ACTUAL) + SUM(HM_CLINICAL_PENETRATION_ACTUAL) + SUM(HM_ATLAS_PENETRATION_ACTUAL)) / (SUM(HM_PENETRATION_GOAL) + SUM(HM_CLINICAL_PENETRATION_GOAL) + SUM(HM_ATLAS_PENETRATION_GOAL)) AS TOTAL_PENETRATION_ATT,
            RANK() OVER (PARTITION BY AWARD_TYPE, COMP_PLAN_ID ORDER BY ZEROIFNULL(SUM(HM_PENETRATION_ACTUAL) / SUM(HM_PENETRATION_GOAL)) DESC) AS HM_PENETRATION_ATT_RANK,
            RANK() OVER (PARTITION BY AWARD_TYPE, COMP_PLAN_ID ORDER BY ZEROIFNULL(SUM(HM_CLINICAL_PENETRATION_ACTUAL) / SUM(HM_CLINICAL_PENETRATION_GOAL)) DESC) AS HM_CLINICAL_PENETRATION_ATT_RANK,
            RANK() OVER (PARTITION BY AWARD_TYPE, COMP_PLAN_ID ORDER BY ZEROIFNULL(SUM(HM_ATLAS_PENETRATION_ACTUAL) / SUM(HM_ATLAS_PENETRATION_GOAL)) DESC) AS HM_ATLAS_PENETRATION_ATT_RANK,
            SUM(HM_PENETRATION_ACTUAL) / SUM(HM_PENETRATION_GOAL) AS HM_PENETRATION_ATT_PCT,
            SUM(HM_CLINICAL_PENETRATION_ACTUAL) / SUM(HM_CLINICAL_PENETRATION_GOAL) AS HM_CLINICAL_PENETRATION_ATT_PCT,
            SUM(HM_ATLAS_PENETRATION_ACTUAL) / SUM(HM_ATLAS_PENETRATION_GOAL) AS HM_ATLAS_PENETRATION_ATT_PCT
FROM        FINAL_PREP
GROUP BY    PAYEE_ID, 
            PAYEE_NAME,
            AWARD_TYPE,
            COMP_PLAN_ID;
            
            
CREATE OR REPLACE TEMPORARY TABLE RANK AS            
            
SELECT      PAYEE_ID, 
            PAYEE_NAME,
            AWARD_TYPE,
            COMP_PLAN_ID,
            GROSS_PROFIT_ATT_RANK,
            VALUE_ADD_ANNUITY_RANK,
            RANK() OVER (PARTITION BY AWARD_TYPE, COMP_PLAN_ID ORDER BY ZEROIFNULL((GROSS_PROFIT_ATT_RANK * 0.7) + (VALUE_ADD_ANNUITY_RANK * 0.3)) ASC) AS PSC_OVERALL_RANK,
            (GROSS_PROFIT_ATT_RANK * 0.7) + (VALUE_ADD_ANNUITY_RANK * 0.3) AS PSC_OVERALL_RANK_POINTS,
            NB_GROSS_PROFIT_RANK,
            HM_PENETRATION_ATT_RANK,
            HM_CLINICAL_PENETRATION_ATT_RANK,
            HM_ATLAS_PENETRATION_ATT_RANK,
            (HM_PENETRATION_ATT_RANK + HM_CLINICAL_PENETRATION_ATT_RANK + HM_ATLAS_PENETRATION_ATT_RANK) AS TOTAL_PENETRATION_POINTS,
            RANK() OVER (PARTITION BY AWARD_TYPE, COMP_PLAN_ID ORDER BY ZEROIFNULL((HM_PENETRATION_ATT_RANK + HM_CLINICAL_PENETRATION_ATT_RANK + HM_ATLAS_PENETRATION_ATT_RANK)) ASC) AS TOTAL_PENETRATION_RANK,
            HM_PENETRATION_ATT_PCT,
            HM_CLINICAL_PENETRATION_ATT_PCT,
            HM_ATLAS_PENETRATION_ATT_PCT
FROM        RANK_PREP
GROUP BY    PAYEE_ID, 
            PAYEE_NAME,
            AWARD_TYPE,
            COMP_PLAN_ID,
            GROSS_PROFIT_ATT_RANK,
            VALUE_ADD_ANNUITY_RANK,
            NB_GROSS_PROFIT_ACT_ADJ,
            NB_GROSS_PROFIT_RANK,
            HM_PENETRATION_ATT_RANK,
            HM_CLINICAL_PENETRATION_ATT_RANK,
            HM_ATLAS_PENETRATION_ATT_RANK,
            HM_PENETRATION_ATT_PCT,
            HM_CLINICAL_PENETRATION_ATT_PCT,
            HM_ATLAS_PENETRATION_ATT_PCT;



CREATE OR REPLACE TEMPORARY TABLE RANK_FINAL AS            
            
SELECT      PAYEE_ID, 
            PAYEE_NAME,
            AWARD_TYPE,
            COMP_PLAN_ID,
            GROSS_PROFIT_ATT_RANK,
            VALUE_ADD_ANNUITY_RANK,
            PSC_OVERALL_RANK,
            PSC_OVERALL_RANK_POINTS,
            NB_GROSS_PROFIT_RANK,
            HM_PENETRATION_ATT_RANK,
            HM_CLINICAL_PENETRATION_ATT_RANK,
            HM_ATLAS_PENETRATION_ATT_RANK,
            TOTAL_PENETRATION_POINTS,
            TOTAL_PENETRATION_RANK,
            (GROSS_PROFIT_ATT_RANK * 0.6) + (TOTAL_PENETRATION_RANK * 0.4) AS VPS_OVERALL_RANK_POINTS,
            RANK() OVER (PARTITION BY AWARD_TYPE, COMP_PLAN_ID ORDER BY ZEROIFNULL((GROSS_PROFIT_ATT_RANK * 0.6) + (TOTAL_PENETRATION_RANK * 0.4)) ASC) AS VPS_OVERALL_RANK,
            HM_PENETRATION_ATT_PCT,
            HM_CLINICAL_PENETRATION_ATT_PCT,
            HM_ATLAS_PENETRATION_ATT_PCT
FROM        RANK
GROUP BY    PAYEE_ID, 
            PAYEE_NAME,
            AWARD_TYPE,
            COMP_PLAN_ID,
            GROSS_PROFIT_ATT_RANK,
            VALUE_ADD_ANNUITY_RANK,
            PSC_OVERALL_RANK,
            PSC_OVERALL_RANK_POINTS,
            NB_GROSS_PROFIT_RANK,
            HM_PENETRATION_ATT_RANK,
            HM_CLINICAL_PENETRATION_ATT_RANK,
            HM_ATLAS_PENETRATION_ATT_RANK,
            TOTAL_PENETRATION_POINTS,
            TOTAL_PENETRATION_RANK,
            HM_PENETRATION_ATT_PCT,
            HM_CLINICAL_PENETRATION_ATT_PCT,
            HM_ATLAS_PENETRATION_ATT_PCT;
            
            
            
CREATE OR REPLACE TEMPORARY TABLE FINAL AS  

SELECT      FINAL_PREP.*,
            RANK_FINAL.GROSS_PROFIT_ATT_RANK,
            RANK_FINAL.VALUE_ADD_ANNUITY_RANK,
            RANK_FINAL.PSC_OVERALL_RANK,
            RANK_FINAL.NB_GROSS_PROFIT_RANK,
            RANK_FINAL.TOTAL_PENETRATION_RANK,
            RANK_FINAL.HM_PENETRATION_ATT_RANK,
            RANK_FINAL.HM_CLINICAL_PENETRATION_ATT_RANK,
            RANK_FINAL.HM_ATLAS_PENETRATION_ATT_RANK,
            RANK_FINAL.VPS_OVERALL_RANK,
            RANK_FINAL.PSC_OVERALL_RANK_POINTS,
            RANK_FINAL.VPS_OVERALL_RANK_POINTS,
            HM_PENETRATION_ATT_PCT,
            HM_CLINICAL_PENETRATION_ATT_PCT,
            HM_ATLAS_PENETRATION_ATT_PCT
FROM        FINAL_PREP
LEFT JOIN   RANK_FINAL
ON          FINAL_PREP.PAYEE_ID = RANK_FINAL.PAYEE_ID
AND         FINAL_PREP.AWARD_TYPE = RANK_FINAL.AWARD_TYPE
AND         FINAL_PREP.COMP_PLAN_ID = RANK_FINAL.COMP_PLAN_ID;
  

--CREATE OR REPLACE TABLE SBX_PSAS_DB.SALES_OPS_GOV.T_CPH_FY23_PRESIDENTS_CLUB 

-- AS SELECT * FROM FINAL;

-- UPDATE   SBX_PSAS_DB.SALES_OPS_GOV.T_CPH_FY23_PRESIDENTS_CLUB
-- SET      TOTAL_PENETRATION_RANK = NULL, VPS_OVERALL_RANK = NULL, VPS_OVERALL_RANK_POINTS = NULL
-- WHERE    COMP_PLAN_ID IN ('USP_RSM','USP_COMBO','USP_RSE');

-- UPDATE   SBX_PSAS_DB.SALES_OPS_GOV.T_CPH_FY23_PRESIDENTS_CLUB
-- SET      VALUE_ADD_ANNUITY_RANK = NULL, PSC_OVERALL_RANK = NULL, PSC_OVERALL_RANK_POINTS = NULL, NB_GROSS_PROFIT_RANK = NULL
-- WHERE    COMP_PLAN_ID IN ('USP_RETAIL_SM');

-- UPDATE   SBX_PSAS_DB.SALES_OPS_GOV.T_CPH_FY23_PRESIDENTS_CLUB
-- SET      VALUE_ADD_ANNUITY_RANK = NULL, PSC_OVERALL_RANK = NULL, PSC_OVERALL_RANK_POINTS = NULL, GROSS_PROFIT_ATT_RANK = NULL
-- WHERE    COMP_PLAN_ID IN ('USP_RSE');

-- UPDATE   SBX_PSAS_DB.SALES_OPS_GOV.T_CPH_FY23_PRESIDENTS_CLUB
-- SET      RENEWAL_POINTS = NULL, RENEWAL_POINTS_ADJ = NULL, RENEWAL_COUNT = NULL
-- WHERE    COMP_PLAN_ID IN ('USP_RSE','USP_RETAIL_SM');

-- UPDATE   SBX_PSAS_DB.SALES_OPS_GOV.T_CPH_FY23_PRESIDENTS_CLUB
-- SET      NB_EST_TOTAL_POINTS = NULL, NB_EST_TOTAL_POINTS_ADJ = NULL
-- WHERE    COMP_PLAN_ID IN ('USP_RSM','USP_COMBO','USP_RETAIL_SM');

